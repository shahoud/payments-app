// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Foreign Key for One-to-One Relation
  userSettings    UserSettings? 
  // One-to-Many Relation (User can have multiple payments)
  payments        Payment[]

  //Add indexes on frequently queried fields like email.
  @@index([email])

}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Payment {
  id          String   @id @default(uuid())
  amount      Float
  reason      String
  paidAt      DateTime
  latitude    Float?    // Nullable field for latitude
  longitude   Float?    // Nullable field for longitude
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  //User Reference
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  //Category Reference
  categoryId String
  category    PaymentCategory @relation(fields: [categoryId], references: [id])
  //Currency Reference
  currencyId String
  currency Currency @relation(fields: [currencyId], references: [id])

  // Add indexes on frequently queried fields like paidAt, userId, and categoryId.
  @@index([paidAt])
  @@index([userId])
  @@index([categoryId])
}


//Currency Model
model Currency {
  id String @id @default(cuid())
  name String //Example: "United States Dollar"
  code String @unique @db.VarChar(3) // ISO 4217 currency codes are 3 characters // Example: "USD", "EUR", "GBP"
  symbol String //Example "$"
  //Relations
  payments Payment[]
  userSettings UserSettings[]
  // Add indexes on frequently queried fields like code.
  @@index([code])
}

//PaymentCategory Model
model PaymentCategory{
  id String @id @default(cuid())
  name String @unique @db.VarChar(255) // Example: "Groceries", "Rent", "Healthcare"
  code String @unique @db.VarChar(4)
  //Relations
  payments Payment[]
  userSettings UserSettings[]
  //Add indexes on frequently queried fields like name.
  @@index([name])

}

//UserSettings Model
model UserSettings{
  id String @id @default(cuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id])
  selectedCurrencies  Currency[]        
  selectedCategories  PaymentCategory[] 
}
